library(pdacmolgrad)
?projectMolGrade
sqrt(9)
sapply(c(1,2,3,4),sqrt)
re=function(x){
x+1
}
sapply(c(1,2,3,4),re)
sapply(c(1,2,3,4),function(bob){
bob+1
})
sapply(c(1,2,3,4),function(arg1){
bob+1
})
x=c(A=1,B=2,C=3)
x
x[1]
x[3]
x[2:3]
x["A"]
data.frame(x)
data.frame(t(x))
data.frame(1:10)
data.frame(a=1:10,b=2:11)
data.frame(a=1:10,b=2:3)
data.frame(a=1:10,b=2:4)
x[c("A","B")]
x=c(KRAS=1,TP53=2,MYC=3)
expval=c(KRAS=1,TP53=2,MYC=3)
expval
expval["KRAS"]
x=data.frame(a=1:10,b=2:11)
x
rownames(x)=letters[1:10]
x
x["a","b"]
x["k","b"]
x["j","b"]
x[c("j","b","e"),"b"]
class(x)
prots=c("a","b","c","d")
lapply(prots,toupper)
toupper("a")
toupper("b")
toupper("d")
toupper("a")
prots=c("a","b","c","d")
lapply(prots,toupper)
lapply(prots,function(x){
print(x)
return(toupper(x))
})
tmp=lapply(prots,function(x){
print(x)
return(toupper(x))
})
tmp
exp=data.frame(a=1:10,b=21:30,c=31:40)
exp
lapply(colnames(exp),function(x){
toupper(x)
})
lapply(colnames(exp),function(x){
mean(exp[,x])
})
do.call(rbind,lapply(colnames(exp),function(x){
data.frame(prot=x,avg=mean(exp[,x]))
}))
l=lapply(colnames(exp),function(x){
data.frame(prot=x,avg=mean(exp[,x]))
})
l
do.call(rbind,l)
allprot=do.call(rbind,l)
allprot
class(allprot)
setwd("/Volumes/FreeAgent GoFlex Drive/RNAseq/count")
rawcount=read.delim("geneCount_raw_80s.tsv",sep="\t",header=T,as.is=T)
head(rawcount)
library(limma)
library(matrixStats)
library(limma)
library(edgeR)
#Preparation des fausses data
set.seed(1)
rawcounts=(matrix(sample(unlist(lapply(runif(10),function(j)lapply(10*(1:10),function(i)rnbinom(1000,i,j))))),ncol=10))
rownames(rawcounts)=paste0("g",1:nrow(rawcounts))
colnames(rawcounts)=letters[1:ncol(rawcounts)]
group = factor(1:10 >5)
names(group)=letters[1:ncol(rawcounts)]
rawcounts
group
colnames(rawcounts)
#Preparation des fausses data
set.seed(1)
rawcounts=(matrix(sample(unlist(lapply(runif(10),function(j)lapply(10*(1:10),function(i)rnbinom(1000,i,j))))),ncol=10))
rownames(rawcounts)=paste0("g",1:nrow(rawcounts))
colnames(rawcounts)=letters[1:ncol(rawcounts)]
group = factor(1:10 >5)
names(group)=letters[1:ncol(rawcounts)]
head(rawcounts)
group = factor(1:10 >5)
names(group)=letters[1:ncol(rawcounts)]
design = model.matrix(~group)
filtrawcounts=rawcounts[which(rowSums(rawcounts>=3)>= (0.05*ncol(rawcounts))),]
voomedcount = voom(calcNormFactors(DGEList(counts = rawcounts),
method = "upperquartile"), design = design)
fit <- lmFit(voomedcount, design)
rawcounts
group
design
rawcount
group
design = model.matrix(~BON3.NT3, BON3.TS.IC.3)
design = model.matrix(~ traite, tt= BON3.NT3)
design = model.matrix(~ traite, tt= BON3.NT3)
BON3.NT3
designgroup
group
names(group)
Nt=c("BON3.EC.IC.1" "BON3.EC.IC.2" "BON3.EC.IC.3"= NT, "BON3.NT1" "BON3.NT2" ,"BON3.NT3"=TR)
( "tr","tr","tr", "ntr","ntr","ntr")
names( Nt) =c( "BON3.EC.IC.1", "BON3.EC.IC.2", "BON3.EC.IC.3", "BON3.NT1" ,"BON3.NT2" ,"BON3.NT3")
Nt=c( "tr","tr","tr", "ntr","ntr","ntr")
names(Nt) =c( "BON3.EC.IC.1", "BON3.EC.IC.2", "BON3.EC.IC.3", "BON3.NT1" ,"BON3.NT2" ,"BON3.NT3")
Nt
design = model.matrix(~ Nt)
design
View(rawcount)
# optional, filter:
#filtrawcounts=rawcounts[which(rowSums(rawcounts>=3)>= (0.05*ncol(rawcounts))),]
head(rawcount[,names(Nt)])
voomedcount = voom(calcNormFactors(DGEList(counts = rawcount[,names(Nt)]),
method = "upperquartile"), design = design)
fit <- lmFit(voomedcount, design)
fit2 <- eBayes(fit)
fulltab = topTable(fit2, adjust = "BH", number = Inf)
head(fulltab)
dim(fulltab)
cit.rnaseq::cit.UQnorm
normCounts=log2(1 + (t(t(rawcount)/apply(rawcount, 2, function(x) {
quantile(x[which(x > 0)], probs = 0.75)
})) * 1000))
dim(normCounts)
normCounts["ENSG00000070961",names(Nt)]
boxplot(normCounts["ENSG00000070961",names(Nt)]~Nt)
print(load("ensembl91.GRC38_hgmmu_chrename.all.GENES.RData"))
head(geneTab)
print(load("ensembl91.GRC38_hgmmu_chrename.all.GENES.RData"))
rownames(geneTab)=geneTab$GeneID
head(geneTab)
head(fulltab)
fulltab$GeneName=geneTab[rownames(fulltab),"GeneName"]
head(fulltab)
head(fulltab,30)
hist(fulltab$P.Value)
dim(fulltab)
fulltab[which(fulltab$adj.P.Val<0.05),]
signiffulltab=fulltab[which(fulltab$adj.P.Val<0.05),]
head(signiffulltab)
dim(signiffulltab)
boxplot(normCounts["ENSG00000070961",names(Nt)]~Nt)
library(beeswarm)
beeswarm(normCounts["ENSG00000070961",names(Nt)]~Nt)
boxplot(normCounts["ENSG00000070961",names(Nt)]~Nt)
beeswarm(normCounts["ENSG00000070961",names(Nt)]~Nt)
boxplot(normCounts["ENSG00000070961",names(Nt)]~Nt)
beeswarm(normCounts["ENSG00000070961",names(Nt)]~Nt,add=T)
beeswarm(normCounts["ENSG00000070961",names(Nt)]~Nt,add=T,pch=16)
devtools::document()
data(molgradeSystems)
use_data(molgradeSystems,pdacmolgrad,internal=T)
library(devtools)
use_data(molgradeSystems,pdacmolgrad,internal=T)
use_data(molgradeSystems,internal=T)
library(pdacmolgrad)
library(pdacmolgrad)
ls()
library(pdacmolgrad)
ls()
library(pdacmolgrad)
library(pdacmolgrad)
library(pdacmolgrad)
pdacmolgrad::molgradeSystems
library(pdacmolgrad)
ls()
molgradeSystems
molgradeSystems
rm(molgradeSystems)
library(pdacmolgrad)
?exportPattern
exportPattern
devtools::exportPattern
?devtools::exportPattern
library(pdacmolgrad)
library(pdacmolgrad)
